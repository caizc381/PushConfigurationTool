<project name="build-deploy-setting" basedir="." default="run-deploy-setting">

	<property name="urlRepos" value="git@git.mytijian.cn:zhchcai/PushConfigurationTool.git" />
	<property name="environment.test" value="environment/crm-test" />

	<condition property="config" value="environments/crm-test">
		<equals arg1="${environment.test}" arg2="environments/crm-test" />
	</condition>

	<condition property="config" value="environments/mytijian-test">
		<equals arg1="${environment.test}" arg2="environments/mytijian-test" />
	</condition>
	<property name="deploy.dir" value="/opt/apache-tomcat-8.0.23/webapps/" />
	<property name="just.local" value="true" />
	<property name="project.name" value="PushConfigurationTool" />
	<property name="local.temp.work.dir" value="${basedir}/temp" />
	<property name="source.dir" value="${basedir}/${project.name}/${config}" />
	<property name="file.list.xml" value="${basedir}/${project.name}/${config}/settingFileList.xml" />

	<condition property="isWindows">
		<os family="windows" />
	</condition>

	<target name="init">
		<taskdef resource="net/sf/antcontrib/antlib.xml">
			<classpath>
				<fileset dir="${basedir}/lib">
					<include name="ant-contrib.jar" />
				</fileset>
			</classpath>
		</taskdef>

		<taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask" classpath="${basedir}/lib/xmltask-v1.15.1.jar">
			<classpath>
				<pathelement path="${basedir}/lib/xmltask-v1.15.1.jar" />
				<pathelement path="${basedir}/lib/xalan-2.7.1.jar" />
			</classpath>
		</taskdef>

		<macrodef name="git">
			<attribute name="command" />
			<attribute name="dir" default="" />
			<element name="args" optional="true" />
			<sequential>
				<echo file="GIT_COMMAND_LOG" message="git @{command} &#xa;" append="yes" />
				<exec executable="git" dir="@{dir}">
					<arg value="@{command}" />
					<args />
				</exec>
			</sequential>
		</macrodef>

		<macrodef name="git-clone-pull">
			<attribute name="repository" />
			<attribute name="dest" />
			<sequential>
				<git command="clone">
					<args>
						<arg value="@{repository}" />
						<arg value="@{dest}" />
					</args>
				</git>
				<git command="pull" dir="@{dest}" />
			</sequential>
		</macrodef>

		<macrodef name="git-checkout-local">
			<attribute name="branch" />
			<attribute name="dir" />
			<attribute name="options" default="" />
			<attribute name="failerror" default="false" />
			<sequential>
					<git command="checkout" dir="@{dir}">
					<args>
						<arg value="@{branch}" />
					</args>
				</git>
			</sequential>
		</macrodef>

		<macrodef name="git-checkout">
			<attribute name="branch" />
			<attribute name="targetbranch" />
			<attribute name="dir" />
			<attribute name="options" default="" />
			<attribute name="failerror" default="false" />
			<sequential>
				<git command="checkout" dir="@{dir}" options="@{options}" failerror="@{failerror}">
					<args>
						<arg value="@{branch}" />
						<arg value="-b@{targetbranch}" />
					</args>
				</git>
			</sequential>
		</macrodef>

		<macrodef name="trim">
			<attribute name="property" />
			<attribute name="input" />
			<sequential>
				<propertyregex property="@{property}" input="@{input}" regexp="[\s]*(.+)[\s]*" select="\1" defaultvalue="@{input}" override="true" />
			</sequential>
		</macrodef>

	</target>
	<target name="clean-all" depends="init">
		<echo>${basedir}/${project.name}</echo>
		<echo>${local.temp.work.dir}</echo>
		<delete dir="${basedir}/${project.name}" />
		<delete dir="${local.temp.work.dir}" />
	</target>

	<target name="clone" depends="clean-all">
		<git-clone-pull repository="${urlRepos}" dest="${project.name}" />
	</target>

	<target name="checkout" depends="clone">
		<git-checkout-local branch="develop" dir="${project.name}"/> 
	</target>

	<target name="run-deploy-setting" depends="checkout">
		<mkdir dir="${local.temp.work.dir}" />
		<xmltask source="${file.list.xml}">
			<call path="/settings/file[@operation='copy']" target="run-copy-file">
				<param name="serverList" path="/settings/serverList/text()" />
				<param name="filename" path="name/text()" />
				<param name="servers" path="servers/text()" />
				<param name="destination" path="destination/text()" />
				<param name="rename" path="rename/text()" default="" />
			</call>
		</xmltask>
		<delete dir="${local.temp.work.dir}" />
	</target>

	<target name="run-copy-file">
		<echo>${destination}</echo>
		<property name="target.absolute.dir" location="${deploy.dir}/${destination}" />
		<antcallback target="do-copy-file-workfolder" return="shortname" />

		<condition property="scondition">
			<equals arg1="${rename}" arg2="" />
		</condition>
		<antcallback target="do-rename-file" return="shortname" />

		<condition property="localcondition">
			<equals arg1="${just.local}" arg2="true" />
		</condition>
		<antcall target="copy-file-to-local" />
		<antcall target="copy-file-to-server" />
	</target>

	<target name="copy-file-to-local" if="localcondition">
		<property name="source.absolute.path" location="${local.temp.work.dir}/${shortname}" />
		<echo message="Copy ${source.absolute.path} to ${target.absolute.dir}" />
		<copy tofile="${target.absolute.dir}/${shortname}" overwrite="yes" file="${source.absolute.path}" />
		
		<echo>target.absolute.dir : ${target.absolute.dir} </echo>
		<echo>shortname : ${shortname} </echo>
		<echo>source.absolute.path : ${source.absolute.path}</echo>
	</target>

	<target name="copy-file-to-server" unless="localcondition">
		<condition property="fcondition">
			<equals arg1="${servers}" arg2="ALL" />
		</condition>
		<antcall target="do-copy-file-to-all-servers" />
		<antcall target="do-copy-file-to-servers" />
	</target>

	<target name="do-copy-file-to-all-servers" if="fcondition">
		<for list="${serverList}" param="letter">
			<sequential>
				<trim property="server" input="@{letter}" />
				<antcall target="do-upload-files" />
			</sequential>
		</for>
	</target>

	<target name="do-copy-file-to-servers" unless="fcondition">
		<for list="${servers}" param="letter">
			<sequential>
				<trim property="server" input="@{letter}" />
				<antcall target="do-upload-files" />
			</sequential>
		</for>
	</target>

	<target name="do-copy-file-workfolder">
		<propertyregex property="shortname" input="${filename}" regexp=".*/" replace="" defaultvalue="${filename}" />
		<echo message="Copy ${filename} to work folder" />
		<copy todir="${local.temp.work.dir}" overwrite="yes">
			<fileset dir="${source.dir}/FileList" includes="${filename}" />
		</copy>
	</target>

	<target name="do-rename-file" unless="scondition">
		<echo message="Rename ${shortname} to ${rename}" />
		<rename src="${local.temp.work.dir}/${shortname}" dest="${local.temp.work.dir}/${rename}" />
		<propertycopy property="shortname" from="rename" override="true" />
	</target>

	<target name="do-upload-files">
		<echo>Copy ${shortname} to ${server} at ${target.absolute.dir}</echo>
		<antcall target="os.difference" />
	</target>

	<target name="doWindows" if="isWindows">
		<echo>You may need to setup a share folder for
			${local.temp.work.dir}/${shortname}
		</echo>
	</target>
	<target name="doUnixLike" unless="isWindows">
		<echo>${user.home}</echo>
		<sshexec command="mkdir -p ${target.absolute.dir}" username="ubuntu" keyfile="${user.home}/.ssh/id_rsa" host="${server}" trust="true" />
		<scp file="${local.temp.work.dir}/${shortname}" remoteTofile="ubuntu@${server}:${target.absolute.dir}/${shortname}" keyfile="${user.home}/.ssh/id_rsa" trust="true" />
	</target>
	<target name="os.difference" depends="doWindows,doUnixLike" />
</project>
